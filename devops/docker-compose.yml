version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: tigerex-postgres
    environment:
      POSTGRES_DB: tigerex
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tigerex_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - tigerex-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tigerex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tigerex-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-tigerex_redis}

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: tigerex-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - tigerex-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: tigerex-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - tigerex-network
    restart: unless-stopped

  # Backend Services
  api-gateway:
    build:
      context: ../backend/api-gateway
      dockerfile: Dockerfile
    container_name: tigerex-api-gateway
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  matching-engine:
    build:
      context: ../backend/matching-engine
      dockerfile: Dockerfile
    container_name: tigerex-matching-engine
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  transaction-engine:
    build:
      context: ../backend/transaction-engine
      dockerfile: Dockerfile
    container_name: tigerex-transaction-engine
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  risk-management:
    build:
      context: ../backend/risk-management
      dockerfile: Dockerfile
    container_name: tigerex-risk-management
    ports:
      - "8083:8083"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  auth-service:
    build:
      context: ../backend/auth-service
      dockerfile: Dockerfile
    container_name: tigerex-auth-service
    ports:
      - "8084:8084"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - APPLE_CLIENT_ID=${APPLE_CLIENT_ID}
      - APPLE_CLIENT_SECRET=${APPLE_CLIENT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  notification-service:
    build:
      context: ../backend/notification-service
      dockerfile: Dockerfile
    container_name: tigerex-notification-service
    ports:
      - "8085:8085"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  super-admin-system:
    build:
      context: ../backend/super-admin-system
      dockerfile: Dockerfile
    container_name: tigerex-super-admin
    ports:
      - "8086:8086"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KUBERNETES_CONFIG_PATH=/app/kubeconfig
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - postgres
      - redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kubeconfig:/app/kubeconfig:ro
    networks:
      - tigerex-network
    restart: unless-stopped

  role-based-admin:
    build:
      context: ../backend/role-based-admin
      dockerfile: Dockerfile
    container_name: tigerex-role-admin
    ports:
      - "8087:8087"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  wallet-management:
    build:
      context: ../backend/wallet-management
      dockerfile: Dockerfile
    container_name: tigerex-wallet-management
    ports:
      - "8088:8088"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - ENCRYPTION_KEY=${WALLET_ENCRYPTION_KEY:-your-wallet-encryption-key}
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  affiliate-system:
    build:
      context: ../backend/affiliate-system
      dockerfile: Dockerfile
    container_name: tigerex-affiliate-system
    ports:
      - "8089:8089"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  ai-maintenance-system:
    build:
      context: ../backend/ai-maintenance-system
      dockerfile: Dockerfile
    container_name: tigerex-ai-maintenance
    ports:
      - "8090:8090"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped
    volumes:
      - ai_models:/app/models

  # Trading Services
  spot-trading:
    build:
      context: ../backend/spot-trading
      dockerfile: Dockerfile
    container_name: tigerex-spot-trading
    ports:
      - "8091:8091"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - tigerex-network
    restart: unless-stopped

  etf-trading:
    build:
      context: ../backend/etf-trading
      dockerfile: Dockerfile
    container_name: tigerex-etf-trading
    ports:
      - "8092:8092"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  trading-pair-management:
    build:
      context: ../backend/trading-pair-management
      dockerfile: Dockerfile
    container_name: tigerex-trading-pairs
    ports:
      - "8093:8093"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-tigerex_password}@postgres:5432/tigerex
      - REDIS_URL=redis://:${REDIS_PASSWORD:-tigerex_redis}@redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tigerex-network
    restart: unless-stopped

  # Frontend Services
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: tigerex-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_PUBLIC_SPOT_API_URL=http://localhost:8091
      - NEXT_PUBLIC_ETF_API_URL=http://localhost:8092
      - NEXT_PUBLIC_TRADING_PAIRS_API_URL=http://localhost:8093
    depends_on:
      - api-gateway
      - spot-trading
      - etf-trading
      - trading-pair-management
    networks:
      - tigerex-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: tigerex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tigerex-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: tigerex-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - tigerex-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: tigerex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - tigerex-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  ai_models:

networks:
  tigerex-network:
    driver: bridge
